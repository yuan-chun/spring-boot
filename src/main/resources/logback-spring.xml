<!--<?xml version="1.0" encoding="utf-8"?>-->
<!--<configuration scan="true" scanPeriod="60 seconds" debug="false">-->
    <!--<include resource="org/springframework/boot/logging/logback/base.xml" />-->
    <!--&lt;!&ndash; 读取 spring.application.name 属性来生成日志文件名-->
        <!--scope：作用域-->
        <!--name：在 logback-spring.xml 使用的键-->
        <!--source：application.properties 文件中的键-->
        <!--defaultValue：默认值-->
     <!--&ndash;&gt;-->
    <!--<property name="logback.logdir" value="D:/logs"/>-->
    <!--<property name="logback.appname" value="app"/>-->
    <!--&lt;!&ndash;控制台&ndash;&gt;-->
    <!--<appender name="console" class="ch.qos.logback.core.ConsoleAppender">-->
        <!--<encoder>-->
            <!--<pattern>%d{yyyy/MM/dd-HH:mm:ss} %clr([%thread]){green} %clr(%-5level){yellow} %clr(%logger){blue} : %msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->

    <!--&lt;!&ndash;日志输出&ndash;&gt;-->
    <!--<appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--&lt;!&ndash;如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，-->
        <!--所以我们使用下面的策略，可以避免输出 Error 的日志&ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--&lt;!&ndash;过滤 Error&ndash;&gt;-->
            <!--<level>ERROR</level>-->
            <!--&lt;!&ndash;匹配到就禁止&ndash;&gt;-->
            <!--<onMatch>DENY</onMatch>-->
            <!--&lt;!&ndash;没有匹配到就允许&ndash;&gt;-->
            <!--<onMismatch>ACCEPT</onMismatch>-->
        <!--</filter>-->
        <!--&lt;!&ndash;日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则-->
            <!--如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天-->
            <!--的日志改名为今天的日期。即，<File> 的日志都是当天的。-->
        <!--&ndash;&gt;-->
        <!--<File>${logback.logdir}/info.${logback.appname}.log</File>-->
        <!--&lt;!&ndash;滚动策略，按照时间滚动 TimeBasedRollingPolicy&ndash;&gt;-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!--&lt;!&ndash;文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间&ndash;&gt;-->
            <!--<FileNamePattern>${logback.logdir}/info.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>-->
            <!--&lt;!&ndash;只保留最近90天的日志&ndash;&gt;-->
            <!--<maxHistory>90</maxHistory>-->
            <!--&lt;!&ndash;用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志&ndash;&gt;-->
            <!--&lt;!&ndash;<totalSizeCap>1GB</totalSizeCap>&ndash;&gt;-->
        <!--</rollingPolicy>-->
        <!--&lt;!&ndash;日志输出编码格式化&ndash;&gt;-->
        <!--<encoder>-->
            <!--<charset>UTF-8</charset>-->
            <!--<pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->


    <!--<appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
            <!--<level>Error</level>-->
        <!--</filter>-->
        <!--<File>${logback.logdir}/error.${logback.appname}.log</File>-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!--<FileNamePattern>${logback.logdir}/error.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>-->
        <!--</rollingPolicy>-->
        <!--<encoder>-->
            <!--<charset>UTF-8</charset>-->
            <!--<pattern>%d{yyyy/MM/dd-HH:mm:ss} %clr([%thread]){green} %clr(%-5level){yellow} %clr(%logger){blue} : %msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->



    <!--<root level="info">-->
        <!--<appender-ref ref="console" />-->
    <!--</root>-->

    <!--<root level="info">-->
        <!--<appender-ref ref="infoAppender" />-->
    <!--</root>-->

    <!--<root level="info">-->
        <!--<appender-ref ref="errorAppender" />-->
    <!--</root>-->
<!--</configuration>-->